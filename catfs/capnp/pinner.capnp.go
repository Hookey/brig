// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Pin struct{ capnp.Struct }

// Pin_TypeID is the unique identifier for the type Pin.
const Pin_TypeID = 0x985d53e01674ee95

func NewPin(s *capnp.Segment) (Pin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Pin{st}, err
}

func NewRootPin(s *capnp.Segment) (Pin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Pin{st}, err
}

func ReadRootPin(msg *capnp.Message) (Pin, error) {
	root, err := msg.RootPtr()
	return Pin{root.Struct()}, err
}

func (s Pin) String() string {
	str, _ := text.Marshal(0x985d53e01674ee95, s.Struct)
	return str
}

func (s Pin) Inode() uint64 {
	return s.Struct.Uint64(0)
}

func (s Pin) SetInode(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Pin) IsPinned() bool {
	return s.Struct.Bit(64)
}

func (s Pin) SetIsPinned(v bool) {
	s.Struct.SetBit(64, v)
}

// Pin_List is a list of Pin.
type Pin_List struct{ capnp.List }

// NewPin creates a new list of Pin.
func NewPin_List(s *capnp.Segment, sz int32) (Pin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Pin_List{l}, err
}

func (s Pin_List) At(i int) Pin { return Pin{s.List.Struct(i)} }

func (s Pin_List) Set(i int, v Pin) error { return s.List.SetStruct(i, v.Struct) }

func (s Pin_List) String() string {
	str, _ := text.MarshalList(0x985d53e01674ee95, s.List)
	return str
}

// Pin_Promise is a wrapper for a Pin promised by a client call.
type Pin_Promise struct{ *capnp.Pipeline }

func (p Pin_Promise) Struct() (Pin, error) {
	s, err := p.Pipeline.Struct()
	return Pin{s}, err
}

// A single entry for a certain content node
type PinEntry struct{ capnp.Struct }

// PinEntry_TypeID is the unique identifier for the type PinEntry.
const PinEntry_TypeID = 0xdb74f7cf7bc815c6

func NewPinEntry(s *capnp.Segment) (PinEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PinEntry{st}, err
}

func NewRootPinEntry(s *capnp.Segment) (PinEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PinEntry{st}, err
}

func ReadRootPinEntry(msg *capnp.Message) (PinEntry, error) {
	root, err := msg.RootPtr()
	return PinEntry{root.Struct()}, err
}

func (s PinEntry) String() string {
	str, _ := text.Marshal(0xdb74f7cf7bc815c6, s.Struct)
	return str
}

func (s PinEntry) Pins() (Pin_List, error) {
	p, err := s.Struct.Ptr(0)
	return Pin_List{List: p.List()}, err
}

func (s PinEntry) HasPins() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PinEntry) SetPins(v Pin_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPins sets the pins field to a newly
// allocated Pin_List, preferring placement in s's segment.
func (s PinEntry) NewPins(n int32) (Pin_List, error) {
	l, err := NewPin_List(s.Struct.Segment(), n)
	if err != nil {
		return Pin_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PinEntry_List is a list of PinEntry.
type PinEntry_List struct{ capnp.List }

// NewPinEntry creates a new list of PinEntry.
func NewPinEntry_List(s *capnp.Segment, sz int32) (PinEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PinEntry_List{l}, err
}

func (s PinEntry_List) At(i int) PinEntry { return PinEntry{s.List.Struct(i)} }

func (s PinEntry_List) Set(i int, v PinEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s PinEntry_List) String() string {
	str, _ := text.MarshalList(0xdb74f7cf7bc815c6, s.List)
	return str
}

// PinEntry_Promise is a wrapper for a PinEntry promised by a client call.
type PinEntry_Promise struct{ *capnp.Pipeline }

func (p PinEntry_Promise) Struct() (PinEntry, error) {
	s, err := p.Pipeline.Struct()
	return PinEntry{s}, err
}

const schema_ba762188b0a6e4cf = "x\xda\\\xd0\xb1K\xebP\x14\x06\xf0\xef\xbbI_[" +
	"x\xef\xb5WT\xe8\xd4\x08]\x14\xb5\xd6I\\l\x07" +
	"\x07\x05!Wg\x85\x90\xa6% 7!\xb9(\xc5\x7f" +
	"@\\Eps\x13\xdc\xdc\xa4\x82\xa3\xe2\xd6\xcd\xc5\xc5" +
	"\xc1I\xd0\xd51\x92\xc5\x8a\xd3\x81\x8f\xc3\xf9\x1d\xbej" +
	"\xbf-d\xe1\x06P\xa5\xc2\x9f\xec\xec\xc3L\xbf\xec\xec" +
	"\x9eC\xd5(\xb2\xd1\xeb\xe5\xf5\xf1\xcc\xc1-\xec\" " +
	";or+\x9f\x1b\x87`\xf60\xf5x4\xfa4\xcf" +
	"\x905\x8e\xf7\x0a,\x02\xad\xab\x09\xcaaQ\x0e\xeb\xf2" +
	"}\x0d\xcc|\xcf\xf4\xd2\xa6\xef\x89X\xc7\xcd8\xd4:" +
	"H\x16}/\xd6qe\xd5\x0d\xb5K\xaa\x92e\x036" +
	"\x019\xbb\x0c\xa8\x86E\xb5$(\xd9\x9ed\x1e.l" +
	"\x02j\xde\xa2Z\x11\xac\x87:\xea\x06,C\xb0\x0cf" +
	"a\xea\xe6\x07\xbb\x00H\x08\xf2\x87g\xfd\xf6rn]" +
	"\x9b\x84\x83\x1c\xb5)\xb2\xbd\xd3\x0bu\xf7tr\x0fe" +
	"\x0bv\x1a\xe4_\xa0\xc5mf\x1d'\x0du\x7f?\xb0" +
	"\x9d@\x9bd\xe0\xf4\xa2\xc4\xf1\x1c?H\x8c\x17j\xc7" +
	"\x8f\xb4\x09\xb4qt\xd4e\x00(\xfb\xfb\xff\x7fsy" +
	"\x91\x16UC\xb0\x12\x87:\xe5\x7f\xd0\xb5\xc8\xea\xb8Z" +
	"0\x0f\xbf\x02\x00\x00\xff\xff\x05\xdde\x03"

func init() {
	schemas.Register(schema_ba762188b0a6e4cf,
		0x985d53e01674ee95,
		0xdb74f7cf7bc815c6)
}
