// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Sync struct{ Client capnp.Client }

// Sync_TypeID is the unique identifier for the type Sync.
const Sync_TypeID = 0xf5692a07c5cf7872

func (c Sync) FetchStore(ctx context.Context, params func(Sync_fetchStore_Params) error, opts ...capnp.CallOption) Sync_fetchStore_Results_Promise {
	if c.Client == nil {
		return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchStore_Params{Struct: s}) }
	}
	return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) FetchPatch(ctx context.Context, params func(Sync_fetchPatch_Params) error, opts ...capnp.CallOption) Sync_fetchPatch_Results_Promise {
	if c.Client == nil {
		return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchPatch_Params{Struct: s}) }
	}
	return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) IsCompleteFetchAllowed(ctx context.Context, params func(Sync_isCompleteFetchAllowed_Params) error, opts ...capnp.CallOption) Sync_isCompleteFetchAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isCompleteFetchAllowed_Params{Struct: s}) }
	}
	return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) IsPushAllowed(ctx context.Context, params func(Sync_isPushAllowed_Params) error, opts ...capnp.CallOption) Sync_isPushAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isPushAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      3,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isPushAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isPushAllowed_Params{Struct: s}) }
	}
	return Sync_isPushAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) Push(ctx context.Context, params func(Sync_push_Params) error, opts ...capnp.CallOption) Sync_push_Results_Promise {
	if c.Client == nil {
		return Sync_push_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      4,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "push",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_push_Params{Struct: s}) }
	}
	return Sync_push_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Sync_Server interface {
	FetchStore(Sync_fetchStore) error

	FetchPatch(Sync_fetchPatch) error

	IsCompleteFetchAllowed(Sync_isCompleteFetchAllowed) error

	IsPushAllowed(Sync_isPushAllowed) error

	Push(Sync_push) error
}

func Sync_ServerToClient(s Sync_Server) Sync {
	c, _ := s.(server.Closer)
	return Sync{Client: server.New(Sync_Methods(nil, s), c)}
}

func Sync_Methods(methods []server.Method, s Sync_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchStore{c, opts, Sync_fetchStore_Params{Struct: p}, Sync_fetchStore_Results{Struct: r}}
			return s.FetchStore(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchPatch{c, opts, Sync_fetchPatch_Params{Struct: p}, Sync_fetchPatch_Results{Struct: r}}
			return s.FetchPatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isCompleteFetchAllowed{c, opts, Sync_isCompleteFetchAllowed_Params{Struct: p}, Sync_isCompleteFetchAllowed_Results{Struct: r}}
			return s.IsCompleteFetchAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      3,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isPushAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isPushAllowed{c, opts, Sync_isPushAllowed_Params{Struct: p}, Sync_isPushAllowed_Results{Struct: r}}
			return s.IsPushAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      4,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "push",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_push{c, opts, Sync_push_Params{Struct: p}, Sync_push_Results{Struct: r}}
			return s.Push(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Sync_fetchStore holds the arguments for a server call to Sync.fetchStore.
type Sync_fetchStore struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_fetchStore_Params
	Results Sync_fetchStore_Results
}

// Sync_fetchPatch holds the arguments for a server call to Sync.fetchPatch.
type Sync_fetchPatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_fetchPatch_Params
	Results Sync_fetchPatch_Results
}

// Sync_isCompleteFetchAllowed holds the arguments for a server call to Sync.isCompleteFetchAllowed.
type Sync_isCompleteFetchAllowed struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_isCompleteFetchAllowed_Params
	Results Sync_isCompleteFetchAllowed_Results
}

// Sync_isPushAllowed holds the arguments for a server call to Sync.isPushAllowed.
type Sync_isPushAllowed struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_isPushAllowed_Params
	Results Sync_isPushAllowed_Results
}

// Sync_push holds the arguments for a server call to Sync.push.
type Sync_push struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_push_Params
	Results Sync_push_Results
}

type Sync_fetchStore_Params struct{ capnp.Struct }

// Sync_fetchStore_Params_TypeID is the unique identifier for the type Sync_fetchStore_Params.
const Sync_fetchStore_Params_TypeID = 0xdc63044e67499411

func NewSync_fetchStore_Params(s *capnp.Segment) (Sync_fetchStore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_fetchStore_Params{st}, err
}

func NewRootSync_fetchStore_Params(s *capnp.Segment) (Sync_fetchStore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_fetchStore_Params{st}, err
}

func ReadRootSync_fetchStore_Params(msg *capnp.Message) (Sync_fetchStore_Params, error) {
	root, err := msg.RootPtr()
	return Sync_fetchStore_Params{root.Struct()}, err
}

func (s Sync_fetchStore_Params) String() string {
	str, _ := text.Marshal(0xdc63044e67499411, s.Struct)
	return str
}

// Sync_fetchStore_Params_List is a list of Sync_fetchStore_Params.
type Sync_fetchStore_Params_List struct{ capnp.List }

// NewSync_fetchStore_Params creates a new list of Sync_fetchStore_Params.
func NewSync_fetchStore_Params_List(s *capnp.Segment, sz int32) (Sync_fetchStore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_fetchStore_Params_List{l}, err
}

func (s Sync_fetchStore_Params_List) At(i int) Sync_fetchStore_Params {
	return Sync_fetchStore_Params{s.List.Struct(i)}
}

func (s Sync_fetchStore_Params_List) Set(i int, v Sync_fetchStore_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchStore_Params_List) String() string {
	str, _ := text.MarshalList(0xdc63044e67499411, s.List)
	return str
}

// Sync_fetchStore_Params_Promise is a wrapper for a Sync_fetchStore_Params promised by a client call.
type Sync_fetchStore_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchStore_Params_Promise) Struct() (Sync_fetchStore_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchStore_Params{s}, err
}

type Sync_fetchStore_Results struct{ capnp.Struct }

// Sync_fetchStore_Results_TypeID is the unique identifier for the type Sync_fetchStore_Results.
const Sync_fetchStore_Results_TypeID = 0xf834409e30e8009c

func NewSync_fetchStore_Results(s *capnp.Segment) (Sync_fetchStore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchStore_Results{st}, err
}

func NewRootSync_fetchStore_Results(s *capnp.Segment) (Sync_fetchStore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchStore_Results{st}, err
}

func ReadRootSync_fetchStore_Results(msg *capnp.Message) (Sync_fetchStore_Results, error) {
	root, err := msg.RootPtr()
	return Sync_fetchStore_Results{root.Struct()}, err
}

func (s Sync_fetchStore_Results) String() string {
	str, _ := text.Marshal(0xf834409e30e8009c, s.Struct)
	return str
}

func (s Sync_fetchStore_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Sync_fetchStore_Results) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Sync_fetchStore_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Sync_fetchStore_Results_List is a list of Sync_fetchStore_Results.
type Sync_fetchStore_Results_List struct{ capnp.List }

// NewSync_fetchStore_Results creates a new list of Sync_fetchStore_Results.
func NewSync_fetchStore_Results_List(s *capnp.Segment, sz int32) (Sync_fetchStore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Sync_fetchStore_Results_List{l}, err
}

func (s Sync_fetchStore_Results_List) At(i int) Sync_fetchStore_Results {
	return Sync_fetchStore_Results{s.List.Struct(i)}
}

func (s Sync_fetchStore_Results_List) Set(i int, v Sync_fetchStore_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchStore_Results_List) String() string {
	str, _ := text.MarshalList(0xf834409e30e8009c, s.List)
	return str
}

// Sync_fetchStore_Results_Promise is a wrapper for a Sync_fetchStore_Results promised by a client call.
type Sync_fetchStore_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchStore_Results_Promise) Struct() (Sync_fetchStore_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchStore_Results{s}, err
}

type Sync_fetchPatch_Params struct{ capnp.Struct }

// Sync_fetchPatch_Params_TypeID is the unique identifier for the type Sync_fetchPatch_Params.
const Sync_fetchPatch_Params_TypeID = 0xb20f728e8e60c3f5

func NewSync_fetchPatch_Params(s *capnp.Segment) (Sync_fetchPatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_fetchPatch_Params{st}, err
}

func NewRootSync_fetchPatch_Params(s *capnp.Segment) (Sync_fetchPatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_fetchPatch_Params{st}, err
}

func ReadRootSync_fetchPatch_Params(msg *capnp.Message) (Sync_fetchPatch_Params, error) {
	root, err := msg.RootPtr()
	return Sync_fetchPatch_Params{root.Struct()}, err
}

func (s Sync_fetchPatch_Params) String() string {
	str, _ := text.Marshal(0xb20f728e8e60c3f5, s.Struct)
	return str
}

func (s Sync_fetchPatch_Params) FromIndex() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Sync_fetchPatch_Params) SetFromIndex(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Sync_fetchPatch_Params_List is a list of Sync_fetchPatch_Params.
type Sync_fetchPatch_Params_List struct{ capnp.List }

// NewSync_fetchPatch_Params creates a new list of Sync_fetchPatch_Params.
func NewSync_fetchPatch_Params_List(s *capnp.Segment, sz int32) (Sync_fetchPatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Sync_fetchPatch_Params_List{l}, err
}

func (s Sync_fetchPatch_Params_List) At(i int) Sync_fetchPatch_Params {
	return Sync_fetchPatch_Params{s.List.Struct(i)}
}

func (s Sync_fetchPatch_Params_List) Set(i int, v Sync_fetchPatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchPatch_Params_List) String() string {
	str, _ := text.MarshalList(0xb20f728e8e60c3f5, s.List)
	return str
}

// Sync_fetchPatch_Params_Promise is a wrapper for a Sync_fetchPatch_Params promised by a client call.
type Sync_fetchPatch_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchPatch_Params_Promise) Struct() (Sync_fetchPatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchPatch_Params{s}, err
}

type Sync_fetchPatch_Results struct{ capnp.Struct }

// Sync_fetchPatch_Results_TypeID is the unique identifier for the type Sync_fetchPatch_Results.
const Sync_fetchPatch_Results_TypeID = 0xc788029a0ef52479

func NewSync_fetchPatch_Results(s *capnp.Segment) (Sync_fetchPatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchPatch_Results{st}, err
}

func NewRootSync_fetchPatch_Results(s *capnp.Segment) (Sync_fetchPatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchPatch_Results{st}, err
}

func ReadRootSync_fetchPatch_Results(msg *capnp.Message) (Sync_fetchPatch_Results, error) {
	root, err := msg.RootPtr()
	return Sync_fetchPatch_Results{root.Struct()}, err
}

func (s Sync_fetchPatch_Results) String() string {
	str, _ := text.Marshal(0xc788029a0ef52479, s.Struct)
	return str
}

func (s Sync_fetchPatch_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Sync_fetchPatch_Results) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Sync_fetchPatch_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Sync_fetchPatch_Results_List is a list of Sync_fetchPatch_Results.
type Sync_fetchPatch_Results_List struct{ capnp.List }

// NewSync_fetchPatch_Results creates a new list of Sync_fetchPatch_Results.
func NewSync_fetchPatch_Results_List(s *capnp.Segment, sz int32) (Sync_fetchPatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Sync_fetchPatch_Results_List{l}, err
}

func (s Sync_fetchPatch_Results_List) At(i int) Sync_fetchPatch_Results {
	return Sync_fetchPatch_Results{s.List.Struct(i)}
}

func (s Sync_fetchPatch_Results_List) Set(i int, v Sync_fetchPatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchPatch_Results_List) String() string {
	str, _ := text.MarshalList(0xc788029a0ef52479, s.List)
	return str
}

// Sync_fetchPatch_Results_Promise is a wrapper for a Sync_fetchPatch_Results promised by a client call.
type Sync_fetchPatch_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchPatch_Results_Promise) Struct() (Sync_fetchPatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchPatch_Results{s}, err
}

type Sync_isCompleteFetchAllowed_Params struct{ capnp.Struct }

// Sync_isCompleteFetchAllowed_Params_TypeID is the unique identifier for the type Sync_isCompleteFetchAllowed_Params.
const Sync_isCompleteFetchAllowed_Params_TypeID = 0xa29b8ab519fba593

func NewSync_isCompleteFetchAllowed_Params(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Params{st}, err
}

func NewRootSync_isCompleteFetchAllowed_Params(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Params{st}, err
}

func ReadRootSync_isCompleteFetchAllowed_Params(msg *capnp.Message) (Sync_isCompleteFetchAllowed_Params, error) {
	root, err := msg.RootPtr()
	return Sync_isCompleteFetchAllowed_Params{root.Struct()}, err
}

func (s Sync_isCompleteFetchAllowed_Params) String() string {
	str, _ := text.Marshal(0xa29b8ab519fba593, s.Struct)
	return str
}

// Sync_isCompleteFetchAllowed_Params_List is a list of Sync_isCompleteFetchAllowed_Params.
type Sync_isCompleteFetchAllowed_Params_List struct{ capnp.List }

// NewSync_isCompleteFetchAllowed_Params creates a new list of Sync_isCompleteFetchAllowed_Params.
func NewSync_isCompleteFetchAllowed_Params_List(s *capnp.Segment, sz int32) (Sync_isCompleteFetchAllowed_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_isCompleteFetchAllowed_Params_List{l}, err
}

func (s Sync_isCompleteFetchAllowed_Params_List) At(i int) Sync_isCompleteFetchAllowed_Params {
	return Sync_isCompleteFetchAllowed_Params{s.List.Struct(i)}
}

func (s Sync_isCompleteFetchAllowed_Params_List) Set(i int, v Sync_isCompleteFetchAllowed_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isCompleteFetchAllowed_Params_List) String() string {
	str, _ := text.MarshalList(0xa29b8ab519fba593, s.List)
	return str
}

// Sync_isCompleteFetchAllowed_Params_Promise is a wrapper for a Sync_isCompleteFetchAllowed_Params promised by a client call.
type Sync_isCompleteFetchAllowed_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_isCompleteFetchAllowed_Params_Promise) Struct() (Sync_isCompleteFetchAllowed_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isCompleteFetchAllowed_Params{s}, err
}

type Sync_isCompleteFetchAllowed_Results struct{ capnp.Struct }

// Sync_isCompleteFetchAllowed_Results_TypeID is the unique identifier for the type Sync_isCompleteFetchAllowed_Results.
const Sync_isCompleteFetchAllowed_Results_TypeID = 0xe7a1e07d1144113e

func NewSync_isCompleteFetchAllowed_Results(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Results{st}, err
}

func NewRootSync_isCompleteFetchAllowed_Results(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Results{st}, err
}

func ReadRootSync_isCompleteFetchAllowed_Results(msg *capnp.Message) (Sync_isCompleteFetchAllowed_Results, error) {
	root, err := msg.RootPtr()
	return Sync_isCompleteFetchAllowed_Results{root.Struct()}, err
}

func (s Sync_isCompleteFetchAllowed_Results) String() string {
	str, _ := text.Marshal(0xe7a1e07d1144113e, s.Struct)
	return str
}

func (s Sync_isCompleteFetchAllowed_Results) IsAllowed() bool {
	return s.Struct.Bit(0)
}

func (s Sync_isCompleteFetchAllowed_Results) SetIsAllowed(v bool) {
	s.Struct.SetBit(0, v)
}

// Sync_isCompleteFetchAllowed_Results_List is a list of Sync_isCompleteFetchAllowed_Results.
type Sync_isCompleteFetchAllowed_Results_List struct{ capnp.List }

// NewSync_isCompleteFetchAllowed_Results creates a new list of Sync_isCompleteFetchAllowed_Results.
func NewSync_isCompleteFetchAllowed_Results_List(s *capnp.Segment, sz int32) (Sync_isCompleteFetchAllowed_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Sync_isCompleteFetchAllowed_Results_List{l}, err
}

func (s Sync_isCompleteFetchAllowed_Results_List) At(i int) Sync_isCompleteFetchAllowed_Results {
	return Sync_isCompleteFetchAllowed_Results{s.List.Struct(i)}
}

func (s Sync_isCompleteFetchAllowed_Results_List) Set(i int, v Sync_isCompleteFetchAllowed_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isCompleteFetchAllowed_Results_List) String() string {
	str, _ := text.MarshalList(0xe7a1e07d1144113e, s.List)
	return str
}

// Sync_isCompleteFetchAllowed_Results_Promise is a wrapper for a Sync_isCompleteFetchAllowed_Results promised by a client call.
type Sync_isCompleteFetchAllowed_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_isCompleteFetchAllowed_Results_Promise) Struct() (Sync_isCompleteFetchAllowed_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isCompleteFetchAllowed_Results{s}, err
}

type Sync_isPushAllowed_Params struct{ capnp.Struct }

// Sync_isPushAllowed_Params_TypeID is the unique identifier for the type Sync_isPushAllowed_Params.
const Sync_isPushAllowed_Params_TypeID = 0xdcee0f1a1e882683

func NewSync_isPushAllowed_Params(s *capnp.Segment) (Sync_isPushAllowed_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isPushAllowed_Params{st}, err
}

func NewRootSync_isPushAllowed_Params(s *capnp.Segment) (Sync_isPushAllowed_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isPushAllowed_Params{st}, err
}

func ReadRootSync_isPushAllowed_Params(msg *capnp.Message) (Sync_isPushAllowed_Params, error) {
	root, err := msg.RootPtr()
	return Sync_isPushAllowed_Params{root.Struct()}, err
}

func (s Sync_isPushAllowed_Params) String() string {
	str, _ := text.Marshal(0xdcee0f1a1e882683, s.Struct)
	return str
}

// Sync_isPushAllowed_Params_List is a list of Sync_isPushAllowed_Params.
type Sync_isPushAllowed_Params_List struct{ capnp.List }

// NewSync_isPushAllowed_Params creates a new list of Sync_isPushAllowed_Params.
func NewSync_isPushAllowed_Params_List(s *capnp.Segment, sz int32) (Sync_isPushAllowed_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_isPushAllowed_Params_List{l}, err
}

func (s Sync_isPushAllowed_Params_List) At(i int) Sync_isPushAllowed_Params {
	return Sync_isPushAllowed_Params{s.List.Struct(i)}
}

func (s Sync_isPushAllowed_Params_List) Set(i int, v Sync_isPushAllowed_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isPushAllowed_Params_List) String() string {
	str, _ := text.MarshalList(0xdcee0f1a1e882683, s.List)
	return str
}

// Sync_isPushAllowed_Params_Promise is a wrapper for a Sync_isPushAllowed_Params promised by a client call.
type Sync_isPushAllowed_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_isPushAllowed_Params_Promise) Struct() (Sync_isPushAllowed_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isPushAllowed_Params{s}, err
}

type Sync_isPushAllowed_Results struct{ capnp.Struct }

// Sync_isPushAllowed_Results_TypeID is the unique identifier for the type Sync_isPushAllowed_Results.
const Sync_isPushAllowed_Results_TypeID = 0xaa3182f28c82f848

func NewSync_isPushAllowed_Results(s *capnp.Segment) (Sync_isPushAllowed_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isPushAllowed_Results{st}, err
}

func NewRootSync_isPushAllowed_Results(s *capnp.Segment) (Sync_isPushAllowed_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isPushAllowed_Results{st}, err
}

func ReadRootSync_isPushAllowed_Results(msg *capnp.Message) (Sync_isPushAllowed_Results, error) {
	root, err := msg.RootPtr()
	return Sync_isPushAllowed_Results{root.Struct()}, err
}

func (s Sync_isPushAllowed_Results) String() string {
	str, _ := text.Marshal(0xaa3182f28c82f848, s.Struct)
	return str
}

func (s Sync_isPushAllowed_Results) IsAllowed() bool {
	return s.Struct.Bit(0)
}

func (s Sync_isPushAllowed_Results) SetIsAllowed(v bool) {
	s.Struct.SetBit(0, v)
}

// Sync_isPushAllowed_Results_List is a list of Sync_isPushAllowed_Results.
type Sync_isPushAllowed_Results_List struct{ capnp.List }

// NewSync_isPushAllowed_Results creates a new list of Sync_isPushAllowed_Results.
func NewSync_isPushAllowed_Results_List(s *capnp.Segment, sz int32) (Sync_isPushAllowed_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Sync_isPushAllowed_Results_List{l}, err
}

func (s Sync_isPushAllowed_Results_List) At(i int) Sync_isPushAllowed_Results {
	return Sync_isPushAllowed_Results{s.List.Struct(i)}
}

func (s Sync_isPushAllowed_Results_List) Set(i int, v Sync_isPushAllowed_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isPushAllowed_Results_List) String() string {
	str, _ := text.MarshalList(0xaa3182f28c82f848, s.List)
	return str
}

// Sync_isPushAllowed_Results_Promise is a wrapper for a Sync_isPushAllowed_Results promised by a client call.
type Sync_isPushAllowed_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_isPushAllowed_Results_Promise) Struct() (Sync_isPushAllowed_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isPushAllowed_Results{s}, err
}

type Sync_push_Params struct{ capnp.Struct }

// Sync_push_Params_TypeID is the unique identifier for the type Sync_push_Params.
const Sync_push_Params_TypeID = 0xf8fe6156816b7dc7

func NewSync_push_Params(s *capnp.Segment) (Sync_push_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_push_Params{st}, err
}

func NewRootSync_push_Params(s *capnp.Segment) (Sync_push_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_push_Params{st}, err
}

func ReadRootSync_push_Params(msg *capnp.Message) (Sync_push_Params, error) {
	root, err := msg.RootPtr()
	return Sync_push_Params{root.Struct()}, err
}

func (s Sync_push_Params) String() string {
	str, _ := text.Marshal(0xf8fe6156816b7dc7, s.Struct)
	return str
}

// Sync_push_Params_List is a list of Sync_push_Params.
type Sync_push_Params_List struct{ capnp.List }

// NewSync_push_Params creates a new list of Sync_push_Params.
func NewSync_push_Params_List(s *capnp.Segment, sz int32) (Sync_push_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_push_Params_List{l}, err
}

func (s Sync_push_Params_List) At(i int) Sync_push_Params { return Sync_push_Params{s.List.Struct(i)} }

func (s Sync_push_Params_List) Set(i int, v Sync_push_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_push_Params_List) String() string {
	str, _ := text.MarshalList(0xf8fe6156816b7dc7, s.List)
	return str
}

// Sync_push_Params_Promise is a wrapper for a Sync_push_Params promised by a client call.
type Sync_push_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_push_Params_Promise) Struct() (Sync_push_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_push_Params{s}, err
}

type Sync_push_Results struct{ capnp.Struct }

// Sync_push_Results_TypeID is the unique identifier for the type Sync_push_Results.
const Sync_push_Results_TypeID = 0xceaa2020b2f72696

func NewSync_push_Results(s *capnp.Segment) (Sync_push_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_push_Results{st}, err
}

func NewRootSync_push_Results(s *capnp.Segment) (Sync_push_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_push_Results{st}, err
}

func ReadRootSync_push_Results(msg *capnp.Message) (Sync_push_Results, error) {
	root, err := msg.RootPtr()
	return Sync_push_Results{root.Struct()}, err
}

func (s Sync_push_Results) String() string {
	str, _ := text.Marshal(0xceaa2020b2f72696, s.Struct)
	return str
}

// Sync_push_Results_List is a list of Sync_push_Results.
type Sync_push_Results_List struct{ capnp.List }

// NewSync_push_Results creates a new list of Sync_push_Results.
func NewSync_push_Results_List(s *capnp.Segment, sz int32) (Sync_push_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_push_Results_List{l}, err
}

func (s Sync_push_Results_List) At(i int) Sync_push_Results {
	return Sync_push_Results{s.List.Struct(i)}
}

func (s Sync_push_Results_List) Set(i int, v Sync_push_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_push_Results_List) String() string {
	str, _ := text.MarshalList(0xceaa2020b2f72696, s.List)
	return str
}

// Sync_push_Results_Promise is a wrapper for a Sync_push_Results promised by a client call.
type Sync_push_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_push_Results_Promise) Struct() (Sync_push_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_push_Results{s}, err
}

type Meta struct{ Client capnp.Client }

// Meta_TypeID is the unique identifier for the type Meta.
const Meta_TypeID = 0xb02d2ba0578cc7ff

func (c Meta) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Meta_Server interface {
	Ping(Meta_ping) error
}

func Meta_ServerToClient(s Meta_Server) Meta {
	c, _ := s.(server.Closer)
	return Meta{Client: server.New(Meta_Methods(nil, s), c)}
}

func Meta_Methods(methods []server.Method, s Meta_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Meta_ping holds the arguments for a server call to Meta.ping.
type Meta_ping struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_ping_Params
	Results Meta_ping_Results
}

type Meta_ping_Params struct{ capnp.Struct }

// Meta_ping_Params_TypeID is the unique identifier for the type Meta_ping_Params.
const Meta_ping_Params_TypeID = 0xe1a9fd466eca248c

func NewMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func NewRootMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func ReadRootMeta_ping_Params(msg *capnp.Message) (Meta_ping_Params, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Params{root.Struct()}, err
}

func (s Meta_ping_Params) String() string {
	str, _ := text.Marshal(0xe1a9fd466eca248c, s.Struct)
	return str
}

// Meta_ping_Params_List is a list of Meta_ping_Params.
type Meta_ping_Params_List struct{ capnp.List }

// NewMeta_ping_Params creates a new list of Meta_ping_Params.
func NewMeta_ping_Params_List(s *capnp.Segment, sz int32) (Meta_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_ping_Params_List{l}, err
}

func (s Meta_ping_Params_List) At(i int) Meta_ping_Params { return Meta_ping_Params{s.List.Struct(i)} }

func (s Meta_ping_Params_List) Set(i int, v Meta_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Params_List) String() string {
	str, _ := text.MarshalList(0xe1a9fd466eca248c, s.List)
	return str
}

// Meta_ping_Params_Promise is a wrapper for a Meta_ping_Params promised by a client call.
type Meta_ping_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Params_Promise) Struct() (Meta_ping_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Params{s}, err
}

type Meta_ping_Results struct{ capnp.Struct }

// Meta_ping_Results_TypeID is the unique identifier for the type Meta_ping_Results.
const Meta_ping_Results_TypeID = 0x9a90fde15285e327

func NewMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func NewRootMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func ReadRootMeta_ping_Results(msg *capnp.Message) (Meta_ping_Results, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Results{root.Struct()}, err
}

func (s Meta_ping_Results) String() string {
	str, _ := text.Marshal(0x9a90fde15285e327, s.Struct)
	return str
}

func (s Meta_ping_Results) Reply() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_ping_Results) HasReply() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_ping_Results) ReplyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_ping_Results) SetReply(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_ping_Results_List is a list of Meta_ping_Results.
type Meta_ping_Results_List struct{ capnp.List }

// NewMeta_ping_Results creates a new list of Meta_ping_Results.
func NewMeta_ping_Results_List(s *capnp.Segment, sz int32) (Meta_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_ping_Results_List{l}, err
}

func (s Meta_ping_Results_List) At(i int) Meta_ping_Results {
	return Meta_ping_Results{s.List.Struct(i)}
}

func (s Meta_ping_Results_List) Set(i int, v Meta_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Results_List) String() string {
	str, _ := text.MarshalList(0x9a90fde15285e327, s.List)
	return str
}

// Meta_ping_Results_Promise is a wrapper for a Meta_ping_Results promised by a client call.
type Meta_ping_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Results_Promise) Struct() (Meta_ping_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Results{s}, err
}

type API struct{ Client capnp.Client }

// API_TypeID is the unique identifier for the type API.
const API_TypeID = 0xb74958502f92fefd

func (c API) Version(ctx context.Context, params func(API_version_Params) error, opts ...capnp.CallOption) API_version_Results_Promise {
	if c.Client == nil {
		return API_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb74958502f92fefd,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:API",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(API_version_Params{Struct: s}) }
	}
	return API_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FetchStore(ctx context.Context, params func(Sync_fetchStore_Params) error, opts ...capnp.CallOption) Sync_fetchStore_Results_Promise {
	if c.Client == nil {
		return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchStore_Params{Struct: s}) }
	}
	return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FetchPatch(ctx context.Context, params func(Sync_fetchPatch_Params) error, opts ...capnp.CallOption) Sync_fetchPatch_Results_Promise {
	if c.Client == nil {
		return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchPatch_Params{Struct: s}) }
	}
	return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) IsCompleteFetchAllowed(ctx context.Context, params func(Sync_isCompleteFetchAllowed_Params) error, opts ...capnp.CallOption) Sync_isCompleteFetchAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isCompleteFetchAllowed_Params{Struct: s}) }
	}
	return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) IsPushAllowed(ctx context.Context, params func(Sync_isPushAllowed_Params) error, opts ...capnp.CallOption) Sync_isPushAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isPushAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      3,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isPushAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isPushAllowed_Params{Struct: s}) }
	}
	return Sync_isPushAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Push(ctx context.Context, params func(Sync_push_Params) error, opts ...capnp.CallOption) Sync_push_Results_Promise {
	if c.Client == nil {
		return Sync_push_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      4,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "push",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_push_Params{Struct: s}) }
	}
	return Sync_push_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type API_Server interface {
	Version(API_version) error

	FetchStore(Sync_fetchStore) error

	FetchPatch(Sync_fetchPatch) error

	IsCompleteFetchAllowed(Sync_isCompleteFetchAllowed) error

	IsPushAllowed(Sync_isPushAllowed) error

	Push(Sync_push) error

	Ping(Meta_ping) error
}

func API_ServerToClient(s API_Server) API {
	c, _ := s.(server.Closer)
	return API{Client: server.New(API_Methods(nil, s), c)}
}

func API_Methods(methods []server.Method, s API_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb74958502f92fefd,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:API",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := API_version{c, opts, API_version_Params{Struct: p}, API_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchStore{c, opts, Sync_fetchStore_Params{Struct: p}, Sync_fetchStore_Results{Struct: r}}
			return s.FetchStore(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchPatch{c, opts, Sync_fetchPatch_Params{Struct: p}, Sync_fetchPatch_Results{Struct: r}}
			return s.FetchPatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isCompleteFetchAllowed{c, opts, Sync_isCompleteFetchAllowed_Params{Struct: p}, Sync_isCompleteFetchAllowed_Results{Struct: r}}
			return s.IsCompleteFetchAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      3,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isPushAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isPushAllowed{c, opts, Sync_isPushAllowed_Params{Struct: p}, Sync_isPushAllowed_Results{Struct: r}}
			return s.IsPushAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      4,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "push",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_push{c, opts, Sync_push_Params{Struct: p}, Sync_push_Results{Struct: r}}
			return s.Push(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// API_version holds the arguments for a server call to API.version.
type API_version struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  API_version_Params
	Results API_version_Results
}

type API_version_Params struct{ capnp.Struct }

// API_version_Params_TypeID is the unique identifier for the type API_version_Params.
const API_version_Params_TypeID = 0xfbab528dd0716804

func NewAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func NewRootAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func ReadRootAPI_version_Params(msg *capnp.Message) (API_version_Params, error) {
	root, err := msg.RootPtr()
	return API_version_Params{root.Struct()}, err
}

func (s API_version_Params) String() string {
	str, _ := text.Marshal(0xfbab528dd0716804, s.Struct)
	return str
}

// API_version_Params_List is a list of API_version_Params.
type API_version_Params_List struct{ capnp.List }

// NewAPI_version_Params creates a new list of API_version_Params.
func NewAPI_version_Params_List(s *capnp.Segment, sz int32) (API_version_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return API_version_Params_List{l}, err
}

func (s API_version_Params_List) At(i int) API_version_Params {
	return API_version_Params{s.List.Struct(i)}
}

func (s API_version_Params_List) Set(i int, v API_version_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Params_List) String() string {
	str, _ := text.MarshalList(0xfbab528dd0716804, s.List)
	return str
}

// API_version_Params_Promise is a wrapper for a API_version_Params promised by a client call.
type API_version_Params_Promise struct{ *capnp.Pipeline }

func (p API_version_Params_Promise) Struct() (API_version_Params, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Params{s}, err
}

type API_version_Results struct{ capnp.Struct }

// API_version_Results_TypeID is the unique identifier for the type API_version_Results.
const API_version_Results_TypeID = 0xebdd19e3dba3370b

func NewAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func NewRootAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func ReadRootAPI_version_Results(msg *capnp.Message) (API_version_Results, error) {
	root, err := msg.RootPtr()
	return API_version_Results{root.Struct()}, err
}

func (s API_version_Results) String() string {
	str, _ := text.Marshal(0xebdd19e3dba3370b, s.Struct)
	return str
}

func (s API_version_Results) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s API_version_Results) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// API_version_Results_List is a list of API_version_Results.
type API_version_Results_List struct{ capnp.List }

// NewAPI_version_Results creates a new list of API_version_Results.
func NewAPI_version_Results_List(s *capnp.Segment, sz int32) (API_version_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return API_version_Results_List{l}, err
}

func (s API_version_Results_List) At(i int) API_version_Results {
	return API_version_Results{s.List.Struct(i)}
}

func (s API_version_Results_List) Set(i int, v API_version_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Results_List) String() string {
	str, _ := text.MarshalList(0xebdd19e3dba3370b, s.List)
	return str
}

// API_version_Results_Promise is a wrapper for a API_version_Results promised by a client call.
type API_version_Results_Promise struct{ *capnp.Pipeline }

func (p API_version_Results_Promise) Struct() (API_version_Results, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Results{s}, err
}

const schema_9bcb07fb35756ee6 = "x\xda\xacU]h\x1cU\x14>\xe7\xde;\x9d\x82\x89" +
	"\xcbe\"d\x85\x9a>\xac-D\xdc\xa4\xd1\"\xe9\x83" +
	"\xbb\x1bm\xe3>Df\xb6\xe2O\x9e\x1cwo\xbb\x83" +
	"\xbb\xb3\xd3\x99Ym\x84 V\x0aU\xd2\xe2\x1f>\xb4" +
	"U\xfc\xc1\x87V\x04)\x88\xd0\xc7\x8a\x04\"\xfe\xbc\xf8" +
	" *X\x8a? \x08\x0a\xc1@\xd8\x8e\xdc\x99\x9d\xc9" +
	"t7\xab\x8b\xf4\xed\xb2\xdf\xb9\xdf~\xe7\x9c\xef~3" +
	"\xcdI\x91\xecS\x0a*\x80\xf1\x88\xb2#\xd8{\xedd" +
	"\xe5j\xe7\x95\xb3\xc0\xb3\x08\xa0\xa0\x0ap\xcfI:\x83" +
	"\x80\xdaiZ\x00\x0c^\xff`3\xfb\xc9\xcb\xe7\xde\x8b" +
	"\x0a\x98\xc4?\xa2\x97\x11X\xf0\xd0\xc6\x89\x95\xbfN\xec" +
	"\xbb\x08F\x16c\xe8-\xfa\x9c\xbcz!\xbc\x1a\xac\xae" +
	"<\xf6\xce]w\x7f\x0c|\x8c\x06\xbf\xd8\xed\xfd\x9b\xea" +
	"\x17\xe7\x00P\xfb\x92\xaei\xdfQ\x15@\xfb\x96\xcek" +
	"\x1dy\x0a\xd6?{\xf2\xcc\x197s)\xcd\xf63]" +
	"\x94l\x7f\x86l\x9d\xeb\xafM\xe9\x8f\x97?\xedc\xbb" +
	"\x8d]\xd1v\xc9z-\xcb\xe6\xb5\x12\xdb\x0b\x10,\xe5" +
	"\xd6o=KN\xad\xa6\xdb\x9aeOI\xb6\x83L\xb2" +
	"\xbd\xb9\xe7\xefK\xbbw_\xfc*\xd5\x96`3\xb2-" +
	"\xfeF\xf9\xe8\xc3\xac\xfaC\x0aY`\x8b\x12yq\xcf" +
	"\xa9;n\xcf\xfc\x91Ff\x99+\x91\x95\xdc\x9a}\xa8" +
	"s\xe1j\x0a\xb9\x93MJ\xe4~\xfe _\xfe\xe9\xdd" +
	"_\xd3m\x8d\xb2+R\xc8\xaeP\xc8-\xf7\xbd\xff\xfd" +
	"\xb5\xec\x8f\xbf\x831\x9e\x14\x94\xd8\x9c,(\x87\x05\xee" +
	"\xf1\xaf?W'\xad\xf5\xbe\xbe-\xb6\xa6\xb5\xc3\xfac" +
	"l\x1e\xb5\x05E\x05\xe8\x9c\xffm\xfa\xed\xe2\xbd\x1b\xa9" +
	"\xb6\xf7+a\xdb%E\x92\xad.?\xfd\xc2\xa3\xe6\xf5" +
	"\x8d\x94PS\x09\x85\xb2\xfa\xb1oNW>\xdc\x04>" +
	"\x1e#e\xe5\x00\xc2t`\x0b\x7f\xaaj:6u\xa6" +
	"L\xc7\xca\xcb\xa3s`A\xf8f\xde\xb1\xec\xa3\xb9\x8a" +
	"\x98\xf0\xda\x0d\xdf3\x18e\x00\x0c\x01\xf8\xe8\x0c\x80\xb1" +
	"\x93\xa21Fp\xc2\x15Nc\x09G\x80\xe0\x08`B" +
	"\xa6\xa4\xc9\x0e/\xd9\xd5\xbc\xe5=\xd0j:\x0d\xe1\x8b" +
	"C\xc2\xaf\xd6K\x8dF\xebYQ\xcb\x15t\xd35\x9b" +
	"^r\x91msQo{I}\xa5 \xfa\xe4T\x00" +
	"\x8c\x11\x8a\xc68\xc1\xc0\xf2\xa2J\xc0\x1a\"\x10\xc4\x94" +
	"(\xd2\xdb!\x80\x8eh0\xaa\x00$;\xc6\xf8\xc9p" +
	">\x09\x84+jF\x8e\xa1\x88:\xe2\xbf\x88<\"{" +
	"\xd2M\xbfZ\xcf\xc9\x86hs\xa0\xc0#n\xabY\xb6" +
	"k\x02\xf08*@P\x19$\xb0\xa4\x97S\xf2\xe2\xfd" +
	"al(\xce\xe7By\xcf?#\\\xcfj\xd9E4" +
	"vb\xcaN\x00[\x0f\x14`8\xe9\x15\xe1\xb5\xd5\x9e" +
	"\xe1Nn\xed:S3}\x13G\x81\xe0hJ4\xed" +
	"ct\xda^=\xf1\xcd\x7f\xfd\xf3a\xbf\xe5\x8axh" +
	"C\xdb@\x9f\xb8\xd16\x03\xcc\xab\x9b\x99\x1b\xcav\x0c" +
	"k\xcbJ\xe42\xf8?6c=[\xccw7\xb4-" +
	"\xe9\xdc\xd6x\xe3M\"\x03\x82l\x90-\xa4\xea\xc8\xb7" +
	"c\xa11\xe2<\xc3\xf3\xd0\xcd\x86W\x17\x81\xf0\x97T" +
	"\xc4$t1\xceK\xbe,\xb1\xb6\x8a$\x09~\x8c#" +
	"\x8c[\x97\x81p\xa1\"M\x92\x10\xe3o\x00\x7f\xc2\x05" +
	"\xc2\x0d\x15Y\x121\x18G,?(\xdf\xc9\xac\x1a\xc4" +
	"\xeb\x04\xea\x8a\"\x06\xb1\xaf\x80V\xebE9\xb1h\xd0" +
	"\x18O\xba\x10\x8d:\x84\xa2\xd5\xc2D\xf7\x97\x8ct\xd0" +
	"PO.r\xcf\xcd\xf4m\xafe\xe8\xa0mv\x93\xeb" +
	"\x9f\x00\x00\x00\xff\xff\x05x4\x05"

func init() {
	schemas.Register(schema_9bcb07fb35756ee6,
		0x9a90fde15285e327,
		0xa29b8ab519fba593,
		0xaa3182f28c82f848,
		0xb02d2ba0578cc7ff,
		0xb20f728e8e60c3f5,
		0xb74958502f92fefd,
		0xc788029a0ef52479,
		0xceaa2020b2f72696,
		0xdc63044e67499411,
		0xdcee0f1a1e882683,
		0xe1a9fd466eca248c,
		0xe7a1e07d1144113e,
		0xebdd19e3dba3370b,
		0xf5692a07c5cf7872,
		0xf834409e30e8009c,
		0xf8fe6156816b7dc7,
		0xfbab528dd0716804)
}
