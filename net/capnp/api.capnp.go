// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Sync struct{ Client capnp.Client }

// Sync_TypeID is the unique identifier for the type Sync.
const Sync_TypeID = 0xf5692a07c5cf7872

func (c Sync) FetchStore(ctx context.Context, params func(Sync_fetchStore_Params) error, opts ...capnp.CallOption) Sync_fetchStore_Results_Promise {
	if c.Client == nil {
		return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchStore_Params{Struct: s}) }
	}
	return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) FetchPatch(ctx context.Context, params func(Sync_fetchPatch_Params) error, opts ...capnp.CallOption) Sync_fetchPatch_Results_Promise {
	if c.Client == nil {
		return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchPatch_Params{Struct: s}) }
	}
	return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) IsCompleteFetchAllowed(ctx context.Context, params func(Sync_isCompleteFetchAllowed_Params) error, opts ...capnp.CallOption) Sync_isCompleteFetchAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isCompleteFetchAllowed_Params{Struct: s}) }
	}
	return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) IsPushAllowed(ctx context.Context, params func(Sync_isPushAllowed_Params) error, opts ...capnp.CallOption) Sync_isPushAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isPushAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      3,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isPushAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isPushAllowed_Params{Struct: s}) }
	}
	return Sync_isPushAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) Push(ctx context.Context, params func(Sync_push_Params) error, opts ...capnp.CallOption) Sync_push_Results_Promise {
	if c.Client == nil {
		return Sync_push_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      4,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "push",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_push_Params{Struct: s}) }
	}
	return Sync_push_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Sync) FetchPatches(ctx context.Context, params func(Sync_fetchPatches_Params) error, opts ...capnp.CallOption) Sync_fetchPatches_Results_Promise {
	if c.Client == nil {
		return Sync_fetchPatches_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      5,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatches",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchPatches_Params{Struct: s}) }
	}
	return Sync_fetchPatches_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Sync_Server interface {
	FetchStore(Sync_fetchStore) error

	FetchPatch(Sync_fetchPatch) error

	IsCompleteFetchAllowed(Sync_isCompleteFetchAllowed) error

	IsPushAllowed(Sync_isPushAllowed) error

	Push(Sync_push) error

	FetchPatches(Sync_fetchPatches) error
}

func Sync_ServerToClient(s Sync_Server) Sync {
	c, _ := s.(server.Closer)
	return Sync{Client: server.New(Sync_Methods(nil, s), c)}
}

func Sync_Methods(methods []server.Method, s Sync_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchStore{c, opts, Sync_fetchStore_Params{Struct: p}, Sync_fetchStore_Results{Struct: r}}
			return s.FetchStore(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchPatch{c, opts, Sync_fetchPatch_Params{Struct: p}, Sync_fetchPatch_Results{Struct: r}}
			return s.FetchPatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isCompleteFetchAllowed{c, opts, Sync_isCompleteFetchAllowed_Params{Struct: p}, Sync_isCompleteFetchAllowed_Results{Struct: r}}
			return s.IsCompleteFetchAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      3,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isPushAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isPushAllowed{c, opts, Sync_isPushAllowed_Params{Struct: p}, Sync_isPushAllowed_Results{Struct: r}}
			return s.IsPushAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      4,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "push",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_push{c, opts, Sync_push_Params{Struct: p}, Sync_push_Results{Struct: r}}
			return s.Push(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      5,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatches",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchPatches{c, opts, Sync_fetchPatches_Params{Struct: p}, Sync_fetchPatches_Results{Struct: r}}
			return s.FetchPatches(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Sync_fetchStore holds the arguments for a server call to Sync.fetchStore.
type Sync_fetchStore struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_fetchStore_Params
	Results Sync_fetchStore_Results
}

// Sync_fetchPatch holds the arguments for a server call to Sync.fetchPatch.
type Sync_fetchPatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_fetchPatch_Params
	Results Sync_fetchPatch_Results
}

// Sync_isCompleteFetchAllowed holds the arguments for a server call to Sync.isCompleteFetchAllowed.
type Sync_isCompleteFetchAllowed struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_isCompleteFetchAllowed_Params
	Results Sync_isCompleteFetchAllowed_Results
}

// Sync_isPushAllowed holds the arguments for a server call to Sync.isPushAllowed.
type Sync_isPushAllowed struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_isPushAllowed_Params
	Results Sync_isPushAllowed_Results
}

// Sync_push holds the arguments for a server call to Sync.push.
type Sync_push struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_push_Params
	Results Sync_push_Results
}

// Sync_fetchPatches holds the arguments for a server call to Sync.fetchPatches.
type Sync_fetchPatches struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Sync_fetchPatches_Params
	Results Sync_fetchPatches_Results
}

type Sync_fetchStore_Params struct{ capnp.Struct }

// Sync_fetchStore_Params_TypeID is the unique identifier for the type Sync_fetchStore_Params.
const Sync_fetchStore_Params_TypeID = 0xdc63044e67499411

func NewSync_fetchStore_Params(s *capnp.Segment) (Sync_fetchStore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_fetchStore_Params{st}, err
}

func NewRootSync_fetchStore_Params(s *capnp.Segment) (Sync_fetchStore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_fetchStore_Params{st}, err
}

func ReadRootSync_fetchStore_Params(msg *capnp.Message) (Sync_fetchStore_Params, error) {
	root, err := msg.RootPtr()
	return Sync_fetchStore_Params{root.Struct()}, err
}

func (s Sync_fetchStore_Params) String() string {
	str, _ := text.Marshal(0xdc63044e67499411, s.Struct)
	return str
}

// Sync_fetchStore_Params_List is a list of Sync_fetchStore_Params.
type Sync_fetchStore_Params_List struct{ capnp.List }

// NewSync_fetchStore_Params creates a new list of Sync_fetchStore_Params.
func NewSync_fetchStore_Params_List(s *capnp.Segment, sz int32) (Sync_fetchStore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_fetchStore_Params_List{l}, err
}

func (s Sync_fetchStore_Params_List) At(i int) Sync_fetchStore_Params {
	return Sync_fetchStore_Params{s.List.Struct(i)}
}

func (s Sync_fetchStore_Params_List) Set(i int, v Sync_fetchStore_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchStore_Params_List) String() string {
	str, _ := text.MarshalList(0xdc63044e67499411, s.List)
	return str
}

// Sync_fetchStore_Params_Promise is a wrapper for a Sync_fetchStore_Params promised by a client call.
type Sync_fetchStore_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchStore_Params_Promise) Struct() (Sync_fetchStore_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchStore_Params{s}, err
}

type Sync_fetchStore_Results struct{ capnp.Struct }

// Sync_fetchStore_Results_TypeID is the unique identifier for the type Sync_fetchStore_Results.
const Sync_fetchStore_Results_TypeID = 0xf834409e30e8009c

func NewSync_fetchStore_Results(s *capnp.Segment) (Sync_fetchStore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchStore_Results{st}, err
}

func NewRootSync_fetchStore_Results(s *capnp.Segment) (Sync_fetchStore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchStore_Results{st}, err
}

func ReadRootSync_fetchStore_Results(msg *capnp.Message) (Sync_fetchStore_Results, error) {
	root, err := msg.RootPtr()
	return Sync_fetchStore_Results{root.Struct()}, err
}

func (s Sync_fetchStore_Results) String() string {
	str, _ := text.Marshal(0xf834409e30e8009c, s.Struct)
	return str
}

func (s Sync_fetchStore_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Sync_fetchStore_Results) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Sync_fetchStore_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Sync_fetchStore_Results_List is a list of Sync_fetchStore_Results.
type Sync_fetchStore_Results_List struct{ capnp.List }

// NewSync_fetchStore_Results creates a new list of Sync_fetchStore_Results.
func NewSync_fetchStore_Results_List(s *capnp.Segment, sz int32) (Sync_fetchStore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Sync_fetchStore_Results_List{l}, err
}

func (s Sync_fetchStore_Results_List) At(i int) Sync_fetchStore_Results {
	return Sync_fetchStore_Results{s.List.Struct(i)}
}

func (s Sync_fetchStore_Results_List) Set(i int, v Sync_fetchStore_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchStore_Results_List) String() string {
	str, _ := text.MarshalList(0xf834409e30e8009c, s.List)
	return str
}

// Sync_fetchStore_Results_Promise is a wrapper for a Sync_fetchStore_Results promised by a client call.
type Sync_fetchStore_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchStore_Results_Promise) Struct() (Sync_fetchStore_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchStore_Results{s}, err
}

type Sync_fetchPatch_Params struct{ capnp.Struct }

// Sync_fetchPatch_Params_TypeID is the unique identifier for the type Sync_fetchPatch_Params.
const Sync_fetchPatch_Params_TypeID = 0xb20f728e8e60c3f5

func NewSync_fetchPatch_Params(s *capnp.Segment) (Sync_fetchPatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_fetchPatch_Params{st}, err
}

func NewRootSync_fetchPatch_Params(s *capnp.Segment) (Sync_fetchPatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_fetchPatch_Params{st}, err
}

func ReadRootSync_fetchPatch_Params(msg *capnp.Message) (Sync_fetchPatch_Params, error) {
	root, err := msg.RootPtr()
	return Sync_fetchPatch_Params{root.Struct()}, err
}

func (s Sync_fetchPatch_Params) String() string {
	str, _ := text.Marshal(0xb20f728e8e60c3f5, s.Struct)
	return str
}

func (s Sync_fetchPatch_Params) FromIndex() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Sync_fetchPatch_Params) SetFromIndex(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Sync_fetchPatch_Params_List is a list of Sync_fetchPatch_Params.
type Sync_fetchPatch_Params_List struct{ capnp.List }

// NewSync_fetchPatch_Params creates a new list of Sync_fetchPatch_Params.
func NewSync_fetchPatch_Params_List(s *capnp.Segment, sz int32) (Sync_fetchPatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Sync_fetchPatch_Params_List{l}, err
}

func (s Sync_fetchPatch_Params_List) At(i int) Sync_fetchPatch_Params {
	return Sync_fetchPatch_Params{s.List.Struct(i)}
}

func (s Sync_fetchPatch_Params_List) Set(i int, v Sync_fetchPatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchPatch_Params_List) String() string {
	str, _ := text.MarshalList(0xb20f728e8e60c3f5, s.List)
	return str
}

// Sync_fetchPatch_Params_Promise is a wrapper for a Sync_fetchPatch_Params promised by a client call.
type Sync_fetchPatch_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchPatch_Params_Promise) Struct() (Sync_fetchPatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchPatch_Params{s}, err
}

type Sync_fetchPatch_Results struct{ capnp.Struct }

// Sync_fetchPatch_Results_TypeID is the unique identifier for the type Sync_fetchPatch_Results.
const Sync_fetchPatch_Results_TypeID = 0xc788029a0ef52479

func NewSync_fetchPatch_Results(s *capnp.Segment) (Sync_fetchPatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchPatch_Results{st}, err
}

func NewRootSync_fetchPatch_Results(s *capnp.Segment) (Sync_fetchPatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchPatch_Results{st}, err
}

func ReadRootSync_fetchPatch_Results(msg *capnp.Message) (Sync_fetchPatch_Results, error) {
	root, err := msg.RootPtr()
	return Sync_fetchPatch_Results{root.Struct()}, err
}

func (s Sync_fetchPatch_Results) String() string {
	str, _ := text.Marshal(0xc788029a0ef52479, s.Struct)
	return str
}

func (s Sync_fetchPatch_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Sync_fetchPatch_Results) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Sync_fetchPatch_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Sync_fetchPatch_Results_List is a list of Sync_fetchPatch_Results.
type Sync_fetchPatch_Results_List struct{ capnp.List }

// NewSync_fetchPatch_Results creates a new list of Sync_fetchPatch_Results.
func NewSync_fetchPatch_Results_List(s *capnp.Segment, sz int32) (Sync_fetchPatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Sync_fetchPatch_Results_List{l}, err
}

func (s Sync_fetchPatch_Results_List) At(i int) Sync_fetchPatch_Results {
	return Sync_fetchPatch_Results{s.List.Struct(i)}
}

func (s Sync_fetchPatch_Results_List) Set(i int, v Sync_fetchPatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchPatch_Results_List) String() string {
	str, _ := text.MarshalList(0xc788029a0ef52479, s.List)
	return str
}

// Sync_fetchPatch_Results_Promise is a wrapper for a Sync_fetchPatch_Results promised by a client call.
type Sync_fetchPatch_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchPatch_Results_Promise) Struct() (Sync_fetchPatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchPatch_Results{s}, err
}

type Sync_isCompleteFetchAllowed_Params struct{ capnp.Struct }

// Sync_isCompleteFetchAllowed_Params_TypeID is the unique identifier for the type Sync_isCompleteFetchAllowed_Params.
const Sync_isCompleteFetchAllowed_Params_TypeID = 0xa29b8ab519fba593

func NewSync_isCompleteFetchAllowed_Params(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Params{st}, err
}

func NewRootSync_isCompleteFetchAllowed_Params(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Params{st}, err
}

func ReadRootSync_isCompleteFetchAllowed_Params(msg *capnp.Message) (Sync_isCompleteFetchAllowed_Params, error) {
	root, err := msg.RootPtr()
	return Sync_isCompleteFetchAllowed_Params{root.Struct()}, err
}

func (s Sync_isCompleteFetchAllowed_Params) String() string {
	str, _ := text.Marshal(0xa29b8ab519fba593, s.Struct)
	return str
}

// Sync_isCompleteFetchAllowed_Params_List is a list of Sync_isCompleteFetchAllowed_Params.
type Sync_isCompleteFetchAllowed_Params_List struct{ capnp.List }

// NewSync_isCompleteFetchAllowed_Params creates a new list of Sync_isCompleteFetchAllowed_Params.
func NewSync_isCompleteFetchAllowed_Params_List(s *capnp.Segment, sz int32) (Sync_isCompleteFetchAllowed_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_isCompleteFetchAllowed_Params_List{l}, err
}

func (s Sync_isCompleteFetchAllowed_Params_List) At(i int) Sync_isCompleteFetchAllowed_Params {
	return Sync_isCompleteFetchAllowed_Params{s.List.Struct(i)}
}

func (s Sync_isCompleteFetchAllowed_Params_List) Set(i int, v Sync_isCompleteFetchAllowed_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isCompleteFetchAllowed_Params_List) String() string {
	str, _ := text.MarshalList(0xa29b8ab519fba593, s.List)
	return str
}

// Sync_isCompleteFetchAllowed_Params_Promise is a wrapper for a Sync_isCompleteFetchAllowed_Params promised by a client call.
type Sync_isCompleteFetchAllowed_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_isCompleteFetchAllowed_Params_Promise) Struct() (Sync_isCompleteFetchAllowed_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isCompleteFetchAllowed_Params{s}, err
}

type Sync_isCompleteFetchAllowed_Results struct{ capnp.Struct }

// Sync_isCompleteFetchAllowed_Results_TypeID is the unique identifier for the type Sync_isCompleteFetchAllowed_Results.
const Sync_isCompleteFetchAllowed_Results_TypeID = 0xe7a1e07d1144113e

func NewSync_isCompleteFetchAllowed_Results(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Results{st}, err
}

func NewRootSync_isCompleteFetchAllowed_Results(s *capnp.Segment) (Sync_isCompleteFetchAllowed_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isCompleteFetchAllowed_Results{st}, err
}

func ReadRootSync_isCompleteFetchAllowed_Results(msg *capnp.Message) (Sync_isCompleteFetchAllowed_Results, error) {
	root, err := msg.RootPtr()
	return Sync_isCompleteFetchAllowed_Results{root.Struct()}, err
}

func (s Sync_isCompleteFetchAllowed_Results) String() string {
	str, _ := text.Marshal(0xe7a1e07d1144113e, s.Struct)
	return str
}

func (s Sync_isCompleteFetchAllowed_Results) IsAllowed() bool {
	return s.Struct.Bit(0)
}

func (s Sync_isCompleteFetchAllowed_Results) SetIsAllowed(v bool) {
	s.Struct.SetBit(0, v)
}

// Sync_isCompleteFetchAllowed_Results_List is a list of Sync_isCompleteFetchAllowed_Results.
type Sync_isCompleteFetchAllowed_Results_List struct{ capnp.List }

// NewSync_isCompleteFetchAllowed_Results creates a new list of Sync_isCompleteFetchAllowed_Results.
func NewSync_isCompleteFetchAllowed_Results_List(s *capnp.Segment, sz int32) (Sync_isCompleteFetchAllowed_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Sync_isCompleteFetchAllowed_Results_List{l}, err
}

func (s Sync_isCompleteFetchAllowed_Results_List) At(i int) Sync_isCompleteFetchAllowed_Results {
	return Sync_isCompleteFetchAllowed_Results{s.List.Struct(i)}
}

func (s Sync_isCompleteFetchAllowed_Results_List) Set(i int, v Sync_isCompleteFetchAllowed_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isCompleteFetchAllowed_Results_List) String() string {
	str, _ := text.MarshalList(0xe7a1e07d1144113e, s.List)
	return str
}

// Sync_isCompleteFetchAllowed_Results_Promise is a wrapper for a Sync_isCompleteFetchAllowed_Results promised by a client call.
type Sync_isCompleteFetchAllowed_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_isCompleteFetchAllowed_Results_Promise) Struct() (Sync_isCompleteFetchAllowed_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isCompleteFetchAllowed_Results{s}, err
}

type Sync_isPushAllowed_Params struct{ capnp.Struct }

// Sync_isPushAllowed_Params_TypeID is the unique identifier for the type Sync_isPushAllowed_Params.
const Sync_isPushAllowed_Params_TypeID = 0xdcee0f1a1e882683

func NewSync_isPushAllowed_Params(s *capnp.Segment) (Sync_isPushAllowed_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isPushAllowed_Params{st}, err
}

func NewRootSync_isPushAllowed_Params(s *capnp.Segment) (Sync_isPushAllowed_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_isPushAllowed_Params{st}, err
}

func ReadRootSync_isPushAllowed_Params(msg *capnp.Message) (Sync_isPushAllowed_Params, error) {
	root, err := msg.RootPtr()
	return Sync_isPushAllowed_Params{root.Struct()}, err
}

func (s Sync_isPushAllowed_Params) String() string {
	str, _ := text.Marshal(0xdcee0f1a1e882683, s.Struct)
	return str
}

// Sync_isPushAllowed_Params_List is a list of Sync_isPushAllowed_Params.
type Sync_isPushAllowed_Params_List struct{ capnp.List }

// NewSync_isPushAllowed_Params creates a new list of Sync_isPushAllowed_Params.
func NewSync_isPushAllowed_Params_List(s *capnp.Segment, sz int32) (Sync_isPushAllowed_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_isPushAllowed_Params_List{l}, err
}

func (s Sync_isPushAllowed_Params_List) At(i int) Sync_isPushAllowed_Params {
	return Sync_isPushAllowed_Params{s.List.Struct(i)}
}

func (s Sync_isPushAllowed_Params_List) Set(i int, v Sync_isPushAllowed_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isPushAllowed_Params_List) String() string {
	str, _ := text.MarshalList(0xdcee0f1a1e882683, s.List)
	return str
}

// Sync_isPushAllowed_Params_Promise is a wrapper for a Sync_isPushAllowed_Params promised by a client call.
type Sync_isPushAllowed_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_isPushAllowed_Params_Promise) Struct() (Sync_isPushAllowed_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isPushAllowed_Params{s}, err
}

type Sync_isPushAllowed_Results struct{ capnp.Struct }

// Sync_isPushAllowed_Results_TypeID is the unique identifier for the type Sync_isPushAllowed_Results.
const Sync_isPushAllowed_Results_TypeID = 0xaa3182f28c82f848

func NewSync_isPushAllowed_Results(s *capnp.Segment) (Sync_isPushAllowed_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isPushAllowed_Results{st}, err
}

func NewRootSync_isPushAllowed_Results(s *capnp.Segment) (Sync_isPushAllowed_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_isPushAllowed_Results{st}, err
}

func ReadRootSync_isPushAllowed_Results(msg *capnp.Message) (Sync_isPushAllowed_Results, error) {
	root, err := msg.RootPtr()
	return Sync_isPushAllowed_Results{root.Struct()}, err
}

func (s Sync_isPushAllowed_Results) String() string {
	str, _ := text.Marshal(0xaa3182f28c82f848, s.Struct)
	return str
}

func (s Sync_isPushAllowed_Results) IsAllowed() bool {
	return s.Struct.Bit(0)
}

func (s Sync_isPushAllowed_Results) SetIsAllowed(v bool) {
	s.Struct.SetBit(0, v)
}

// Sync_isPushAllowed_Results_List is a list of Sync_isPushAllowed_Results.
type Sync_isPushAllowed_Results_List struct{ capnp.List }

// NewSync_isPushAllowed_Results creates a new list of Sync_isPushAllowed_Results.
func NewSync_isPushAllowed_Results_List(s *capnp.Segment, sz int32) (Sync_isPushAllowed_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Sync_isPushAllowed_Results_List{l}, err
}

func (s Sync_isPushAllowed_Results_List) At(i int) Sync_isPushAllowed_Results {
	return Sync_isPushAllowed_Results{s.List.Struct(i)}
}

func (s Sync_isPushAllowed_Results_List) Set(i int, v Sync_isPushAllowed_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_isPushAllowed_Results_List) String() string {
	str, _ := text.MarshalList(0xaa3182f28c82f848, s.List)
	return str
}

// Sync_isPushAllowed_Results_Promise is a wrapper for a Sync_isPushAllowed_Results promised by a client call.
type Sync_isPushAllowed_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_isPushAllowed_Results_Promise) Struct() (Sync_isPushAllowed_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_isPushAllowed_Results{s}, err
}

type Sync_push_Params struct{ capnp.Struct }

// Sync_push_Params_TypeID is the unique identifier for the type Sync_push_Params.
const Sync_push_Params_TypeID = 0xf8fe6156816b7dc7

func NewSync_push_Params(s *capnp.Segment) (Sync_push_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_push_Params{st}, err
}

func NewRootSync_push_Params(s *capnp.Segment) (Sync_push_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_push_Params{st}, err
}

func ReadRootSync_push_Params(msg *capnp.Message) (Sync_push_Params, error) {
	root, err := msg.RootPtr()
	return Sync_push_Params{root.Struct()}, err
}

func (s Sync_push_Params) String() string {
	str, _ := text.Marshal(0xf8fe6156816b7dc7, s.Struct)
	return str
}

// Sync_push_Params_List is a list of Sync_push_Params.
type Sync_push_Params_List struct{ capnp.List }

// NewSync_push_Params creates a new list of Sync_push_Params.
func NewSync_push_Params_List(s *capnp.Segment, sz int32) (Sync_push_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_push_Params_List{l}, err
}

func (s Sync_push_Params_List) At(i int) Sync_push_Params { return Sync_push_Params{s.List.Struct(i)} }

func (s Sync_push_Params_List) Set(i int, v Sync_push_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_push_Params_List) String() string {
	str, _ := text.MarshalList(0xf8fe6156816b7dc7, s.List)
	return str
}

// Sync_push_Params_Promise is a wrapper for a Sync_push_Params promised by a client call.
type Sync_push_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_push_Params_Promise) Struct() (Sync_push_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_push_Params{s}, err
}

type Sync_push_Results struct{ capnp.Struct }

// Sync_push_Results_TypeID is the unique identifier for the type Sync_push_Results.
const Sync_push_Results_TypeID = 0xceaa2020b2f72696

func NewSync_push_Results(s *capnp.Segment) (Sync_push_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_push_Results{st}, err
}

func NewRootSync_push_Results(s *capnp.Segment) (Sync_push_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sync_push_Results{st}, err
}

func ReadRootSync_push_Results(msg *capnp.Message) (Sync_push_Results, error) {
	root, err := msg.RootPtr()
	return Sync_push_Results{root.Struct()}, err
}

func (s Sync_push_Results) String() string {
	str, _ := text.Marshal(0xceaa2020b2f72696, s.Struct)
	return str
}

// Sync_push_Results_List is a list of Sync_push_Results.
type Sync_push_Results_List struct{ capnp.List }

// NewSync_push_Results creates a new list of Sync_push_Results.
func NewSync_push_Results_List(s *capnp.Segment, sz int32) (Sync_push_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Sync_push_Results_List{l}, err
}

func (s Sync_push_Results_List) At(i int) Sync_push_Results {
	return Sync_push_Results{s.List.Struct(i)}
}

func (s Sync_push_Results_List) Set(i int, v Sync_push_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_push_Results_List) String() string {
	str, _ := text.MarshalList(0xceaa2020b2f72696, s.List)
	return str
}

// Sync_push_Results_Promise is a wrapper for a Sync_push_Results promised by a client call.
type Sync_push_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_push_Results_Promise) Struct() (Sync_push_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_push_Results{s}, err
}

type Sync_fetchPatches_Params struct{ capnp.Struct }

// Sync_fetchPatches_Params_TypeID is the unique identifier for the type Sync_fetchPatches_Params.
const Sync_fetchPatches_Params_TypeID = 0x85647b71cba016e2

func NewSync_fetchPatches_Params(s *capnp.Segment) (Sync_fetchPatches_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_fetchPatches_Params{st}, err
}

func NewRootSync_fetchPatches_Params(s *capnp.Segment) (Sync_fetchPatches_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sync_fetchPatches_Params{st}, err
}

func ReadRootSync_fetchPatches_Params(msg *capnp.Message) (Sync_fetchPatches_Params, error) {
	root, err := msg.RootPtr()
	return Sync_fetchPatches_Params{root.Struct()}, err
}

func (s Sync_fetchPatches_Params) String() string {
	str, _ := text.Marshal(0x85647b71cba016e2, s.Struct)
	return str
}

func (s Sync_fetchPatches_Params) FromIndex() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Sync_fetchPatches_Params) SetFromIndex(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Sync_fetchPatches_Params_List is a list of Sync_fetchPatches_Params.
type Sync_fetchPatches_Params_List struct{ capnp.List }

// NewSync_fetchPatches_Params creates a new list of Sync_fetchPatches_Params.
func NewSync_fetchPatches_Params_List(s *capnp.Segment, sz int32) (Sync_fetchPatches_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Sync_fetchPatches_Params_List{l}, err
}

func (s Sync_fetchPatches_Params_List) At(i int) Sync_fetchPatches_Params {
	return Sync_fetchPatches_Params{s.List.Struct(i)}
}

func (s Sync_fetchPatches_Params_List) Set(i int, v Sync_fetchPatches_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchPatches_Params_List) String() string {
	str, _ := text.MarshalList(0x85647b71cba016e2, s.List)
	return str
}

// Sync_fetchPatches_Params_Promise is a wrapper for a Sync_fetchPatches_Params promised by a client call.
type Sync_fetchPatches_Params_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchPatches_Params_Promise) Struct() (Sync_fetchPatches_Params, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchPatches_Params{s}, err
}

type Sync_fetchPatches_Results struct{ capnp.Struct }

// Sync_fetchPatches_Results_TypeID is the unique identifier for the type Sync_fetchPatches_Results.
const Sync_fetchPatches_Results_TypeID = 0xf9248392457904d7

func NewSync_fetchPatches_Results(s *capnp.Segment) (Sync_fetchPatches_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchPatches_Results{st}, err
}

func NewRootSync_fetchPatches_Results(s *capnp.Segment) (Sync_fetchPatches_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sync_fetchPatches_Results{st}, err
}

func ReadRootSync_fetchPatches_Results(msg *capnp.Message) (Sync_fetchPatches_Results, error) {
	root, err := msg.RootPtr()
	return Sync_fetchPatches_Results{root.Struct()}, err
}

func (s Sync_fetchPatches_Results) String() string {
	str, _ := text.Marshal(0xf9248392457904d7, s.Struct)
	return str
}

func (s Sync_fetchPatches_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Sync_fetchPatches_Results) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Sync_fetchPatches_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Sync_fetchPatches_Results_List is a list of Sync_fetchPatches_Results.
type Sync_fetchPatches_Results_List struct{ capnp.List }

// NewSync_fetchPatches_Results creates a new list of Sync_fetchPatches_Results.
func NewSync_fetchPatches_Results_List(s *capnp.Segment, sz int32) (Sync_fetchPatches_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Sync_fetchPatches_Results_List{l}, err
}

func (s Sync_fetchPatches_Results_List) At(i int) Sync_fetchPatches_Results {
	return Sync_fetchPatches_Results{s.List.Struct(i)}
}

func (s Sync_fetchPatches_Results_List) Set(i int, v Sync_fetchPatches_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Sync_fetchPatches_Results_List) String() string {
	str, _ := text.MarshalList(0xf9248392457904d7, s.List)
	return str
}

// Sync_fetchPatches_Results_Promise is a wrapper for a Sync_fetchPatches_Results promised by a client call.
type Sync_fetchPatches_Results_Promise struct{ *capnp.Pipeline }

func (p Sync_fetchPatches_Results_Promise) Struct() (Sync_fetchPatches_Results, error) {
	s, err := p.Pipeline.Struct()
	return Sync_fetchPatches_Results{s}, err
}

type Meta struct{ Client capnp.Client }

// Meta_TypeID is the unique identifier for the type Meta.
const Meta_TypeID = 0xb02d2ba0578cc7ff

func (c Meta) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Meta_Server interface {
	Ping(Meta_ping) error
}

func Meta_ServerToClient(s Meta_Server) Meta {
	c, _ := s.(server.Closer)
	return Meta{Client: server.New(Meta_Methods(nil, s), c)}
}

func Meta_Methods(methods []server.Method, s Meta_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Meta_ping holds the arguments for a server call to Meta.ping.
type Meta_ping struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Meta_ping_Params
	Results Meta_ping_Results
}

type Meta_ping_Params struct{ capnp.Struct }

// Meta_ping_Params_TypeID is the unique identifier for the type Meta_ping_Params.
const Meta_ping_Params_TypeID = 0xe1a9fd466eca248c

func NewMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func NewRootMeta_ping_Params(s *capnp.Segment) (Meta_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Meta_ping_Params{st}, err
}

func ReadRootMeta_ping_Params(msg *capnp.Message) (Meta_ping_Params, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Params{root.Struct()}, err
}

func (s Meta_ping_Params) String() string {
	str, _ := text.Marshal(0xe1a9fd466eca248c, s.Struct)
	return str
}

// Meta_ping_Params_List is a list of Meta_ping_Params.
type Meta_ping_Params_List struct{ capnp.List }

// NewMeta_ping_Params creates a new list of Meta_ping_Params.
func NewMeta_ping_Params_List(s *capnp.Segment, sz int32) (Meta_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Meta_ping_Params_List{l}, err
}

func (s Meta_ping_Params_List) At(i int) Meta_ping_Params { return Meta_ping_Params{s.List.Struct(i)} }

func (s Meta_ping_Params_List) Set(i int, v Meta_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Params_List) String() string {
	str, _ := text.MarshalList(0xe1a9fd466eca248c, s.List)
	return str
}

// Meta_ping_Params_Promise is a wrapper for a Meta_ping_Params promised by a client call.
type Meta_ping_Params_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Params_Promise) Struct() (Meta_ping_Params, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Params{s}, err
}

type Meta_ping_Results struct{ capnp.Struct }

// Meta_ping_Results_TypeID is the unique identifier for the type Meta_ping_Results.
const Meta_ping_Results_TypeID = 0x9a90fde15285e327

func NewMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func NewRootMeta_ping_Results(s *capnp.Segment) (Meta_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Meta_ping_Results{st}, err
}

func ReadRootMeta_ping_Results(msg *capnp.Message) (Meta_ping_Results, error) {
	root, err := msg.RootPtr()
	return Meta_ping_Results{root.Struct()}, err
}

func (s Meta_ping_Results) String() string {
	str, _ := text.Marshal(0x9a90fde15285e327, s.Struct)
	return str
}

func (s Meta_ping_Results) Reply() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Meta_ping_Results) HasReply() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Meta_ping_Results) ReplyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Meta_ping_Results) SetReply(v string) error {
	return s.Struct.SetText(0, v)
}

// Meta_ping_Results_List is a list of Meta_ping_Results.
type Meta_ping_Results_List struct{ capnp.List }

// NewMeta_ping_Results creates a new list of Meta_ping_Results.
func NewMeta_ping_Results_List(s *capnp.Segment, sz int32) (Meta_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Meta_ping_Results_List{l}, err
}

func (s Meta_ping_Results_List) At(i int) Meta_ping_Results {
	return Meta_ping_Results{s.List.Struct(i)}
}

func (s Meta_ping_Results_List) Set(i int, v Meta_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Meta_ping_Results_List) String() string {
	str, _ := text.MarshalList(0x9a90fde15285e327, s.List)
	return str
}

// Meta_ping_Results_Promise is a wrapper for a Meta_ping_Results promised by a client call.
type Meta_ping_Results_Promise struct{ *capnp.Pipeline }

func (p Meta_ping_Results_Promise) Struct() (Meta_ping_Results, error) {
	s, err := p.Pipeline.Struct()
	return Meta_ping_Results{s}, err
}

type API struct{ Client capnp.Client }

// API_TypeID is the unique identifier for the type API.
const API_TypeID = 0xb74958502f92fefd

func (c API) Version(ctx context.Context, params func(API_version_Params) error, opts ...capnp.CallOption) API_version_Results_Promise {
	if c.Client == nil {
		return API_version_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb74958502f92fefd,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:API",
			MethodName:    "version",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(API_version_Params{Struct: s}) }
	}
	return API_version_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FetchStore(ctx context.Context, params func(Sync_fetchStore_Params) error, opts ...capnp.CallOption) Sync_fetchStore_Results_Promise {
	if c.Client == nil {
		return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchStore_Params{Struct: s}) }
	}
	return Sync_fetchStore_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FetchPatch(ctx context.Context, params func(Sync_fetchPatch_Params) error, opts ...capnp.CallOption) Sync_fetchPatch_Results_Promise {
	if c.Client == nil {
		return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchPatch_Params{Struct: s}) }
	}
	return Sync_fetchPatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) IsCompleteFetchAllowed(ctx context.Context, params func(Sync_isCompleteFetchAllowed_Params) error, opts ...capnp.CallOption) Sync_isCompleteFetchAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isCompleteFetchAllowed_Params{Struct: s}) }
	}
	return Sync_isCompleteFetchAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) IsPushAllowed(ctx context.Context, params func(Sync_isPushAllowed_Params) error, opts ...capnp.CallOption) Sync_isPushAllowed_Results_Promise {
	if c.Client == nil {
		return Sync_isPushAllowed_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      3,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isPushAllowed",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_isPushAllowed_Params{Struct: s}) }
	}
	return Sync_isPushAllowed_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Push(ctx context.Context, params func(Sync_push_Params) error, opts ...capnp.CallOption) Sync_push_Results_Promise {
	if c.Client == nil {
		return Sync_push_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      4,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "push",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_push_Params{Struct: s}) }
	}
	return Sync_push_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) FetchPatches(ctx context.Context, params func(Sync_fetchPatches_Params) error, opts ...capnp.CallOption) Sync_fetchPatches_Results_Promise {
	if c.Client == nil {
		return Sync_fetchPatches_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      5,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatches",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Sync_fetchPatches_Params{Struct: s}) }
	}
	return Sync_fetchPatches_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c API) Ping(ctx context.Context, params func(Meta_ping_Params) error, opts ...capnp.CallOption) Meta_ping_Results_Promise {
	if c.Client == nil {
		return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Meta_ping_Params{Struct: s}) }
	}
	return Meta_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type API_Server interface {
	Version(API_version) error

	FetchStore(Sync_fetchStore) error

	FetchPatch(Sync_fetchPatch) error

	IsCompleteFetchAllowed(Sync_isCompleteFetchAllowed) error

	IsPushAllowed(Sync_isPushAllowed) error

	Push(Sync_push) error

	FetchPatches(Sync_fetchPatches) error

	Ping(Meta_ping) error
}

func API_ServerToClient(s API_Server) API {
	c, _ := s.(server.Closer)
	return API{Client: server.New(API_Methods(nil, s), c)}
}

func API_Methods(methods []server.Method, s API_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb74958502f92fefd,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:API",
			MethodName:    "version",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := API_version{c, opts, API_version_Params{Struct: p}, API_version_Results{Struct: r}}
			return s.Version(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchStore",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchStore{c, opts, Sync_fetchStore_Params{Struct: p}, Sync_fetchStore_Results{Struct: r}}
			return s.FetchStore(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      1,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchPatch{c, opts, Sync_fetchPatch_Params{Struct: p}, Sync_fetchPatch_Results{Struct: r}}
			return s.FetchPatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      2,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isCompleteFetchAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isCompleteFetchAllowed{c, opts, Sync_isCompleteFetchAllowed_Params{Struct: p}, Sync_isCompleteFetchAllowed_Results{Struct: r}}
			return s.IsCompleteFetchAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      3,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "isPushAllowed",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_isPushAllowed{c, opts, Sync_isPushAllowed_Params{Struct: p}, Sync_isPushAllowed_Results{Struct: r}}
			return s.IsPushAllowed(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      4,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "push",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_push{c, opts, Sync_push_Params{Struct: p}, Sync_push_Results{Struct: r}}
			return s.Push(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5692a07c5cf7872,
			MethodID:      5,
			InterfaceName: "net/capnp/api.capnp:Sync",
			MethodName:    "fetchPatches",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Sync_fetchPatches{c, opts, Sync_fetchPatches_Params{Struct: p}, Sync_fetchPatches_Results{Struct: r}}
			return s.FetchPatches(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb02d2ba0578cc7ff,
			MethodID:      0,
			InterfaceName: "net/capnp/api.capnp:Meta",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Meta_ping{c, opts, Meta_ping_Params{Struct: p}, Meta_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// API_version holds the arguments for a server call to API.version.
type API_version struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  API_version_Params
	Results API_version_Results
}

type API_version_Params struct{ capnp.Struct }

// API_version_Params_TypeID is the unique identifier for the type API_version_Params.
const API_version_Params_TypeID = 0xfbab528dd0716804

func NewAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func NewRootAPI_version_Params(s *capnp.Segment) (API_version_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_version_Params{st}, err
}

func ReadRootAPI_version_Params(msg *capnp.Message) (API_version_Params, error) {
	root, err := msg.RootPtr()
	return API_version_Params{root.Struct()}, err
}

func (s API_version_Params) String() string {
	str, _ := text.Marshal(0xfbab528dd0716804, s.Struct)
	return str
}

// API_version_Params_List is a list of API_version_Params.
type API_version_Params_List struct{ capnp.List }

// NewAPI_version_Params creates a new list of API_version_Params.
func NewAPI_version_Params_List(s *capnp.Segment, sz int32) (API_version_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return API_version_Params_List{l}, err
}

func (s API_version_Params_List) At(i int) API_version_Params {
	return API_version_Params{s.List.Struct(i)}
}

func (s API_version_Params_List) Set(i int, v API_version_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Params_List) String() string {
	str, _ := text.MarshalList(0xfbab528dd0716804, s.List)
	return str
}

// API_version_Params_Promise is a wrapper for a API_version_Params promised by a client call.
type API_version_Params_Promise struct{ *capnp.Pipeline }

func (p API_version_Params_Promise) Struct() (API_version_Params, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Params{s}, err
}

type API_version_Results struct{ capnp.Struct }

// API_version_Results_TypeID is the unique identifier for the type API_version_Results.
const API_version_Results_TypeID = 0xebdd19e3dba3370b

func NewAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func NewRootAPI_version_Results(s *capnp.Segment) (API_version_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_version_Results{st}, err
}

func ReadRootAPI_version_Results(msg *capnp.Message) (API_version_Results, error) {
	root, err := msg.RootPtr()
	return API_version_Results{root.Struct()}, err
}

func (s API_version_Results) String() string {
	str, _ := text.Marshal(0xebdd19e3dba3370b, s.Struct)
	return str
}

func (s API_version_Results) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s API_version_Results) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// API_version_Results_List is a list of API_version_Results.
type API_version_Results_List struct{ capnp.List }

// NewAPI_version_Results creates a new list of API_version_Results.
func NewAPI_version_Results_List(s *capnp.Segment, sz int32) (API_version_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return API_version_Results_List{l}, err
}

func (s API_version_Results_List) At(i int) API_version_Results {
	return API_version_Results{s.List.Struct(i)}
}

func (s API_version_Results_List) Set(i int, v API_version_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s API_version_Results_List) String() string {
	str, _ := text.MarshalList(0xebdd19e3dba3370b, s.List)
	return str
}

// API_version_Results_Promise is a wrapper for a API_version_Results promised by a client call.
type API_version_Results_Promise struct{ *capnp.Pipeline }

func (p API_version_Results_Promise) Struct() (API_version_Results, error) {
	s, err := p.Pipeline.Struct()
	return API_version_Results{s}, err
}

const schema_9bcb07fb35756ee6 = "x\xda\xacU]h\x1cU\x14>\xe7\xde;\x99\x82\x89" +
	"\xcbe\x8ad\x05M\x85\xb5\x85H\x936U\xa4\x05\xcd" +
	"&\x9a\xd6\x05#3[P\x1b\x10\x1cwo\xbb[7" +
	"\xbb\x93\x99Y\xed*E\xda\x12\xac\x12\xab\xd4\x9f\x87\xb6" +
	"JU\xfa\xd0\x8a`\x0b\"\x14|\xa9H0\x05\xf5E" +
	"|P\xc1Z\xfc\x01QPX\x8c\x84\xed\xc8\x9d\xd9\x99" +
	"\xdc$\x8d]\x8bo\xcb\x9es\xbf\xf9\xbes\xbe\xfb\xdd" +
	"M[H\x96l\xd6^\xee\x02\xb0\x1e\xd4\xba\x82\x1fn" +
	":yq\xea\xd9\xe24XiD\x00\xa6\x03l\xd9H" +
	"\xf7\"\xa0\xb1\x95\x0e\x03\x06\x1b.O\xe7/\xb5^9" +
	"\x06<\x8d\x00\x1a\xca\x86\xc7\xe8\x90l\x10a\xc3\xab\xa7" +
	"\x16\xd2\x1f\xbex\xfc\x9d\xa8!\x04\x98\xa6\xe7\x11X\xf0" +
	"\xc0\xfc\xc1\x99?\x0fn>\xa3b\xd7\xe93\xf2\xe8\x81" +
	"\xf0h0;\xf3\xc8\xc9;6~\x00|-\x0d~\xaa" +
	"\xd6\xefZ\xd0/\x1e\x07@\xe3\x14\x9d3\xceR\x1d\xc0" +
	"x\x9f\xee0\xbe\x92\xbf\x82\xe6'\x8f\x1f9\xe2\xa6\xce" +
	"\xa9h\x1f\xd3\x09\x89\xf6Y\x88\xd6\xbart\xd0|4" +
	"\xf7\xd1\x0a\xb4\xdf\xe8\x05\xa3\x19\xa2\xfdAw\x18i\xb6" +
	"\x01 hd\x9a7\x1e#\x87gUY\x9c=!\xd1" +
	"na\x12\xed\x8d\xf5\x7f\x9d[\xb7\xee\xcc\xe7\x8a\xac{" +
	"\xd8\x90\x94\xc5_\xcb\xedy\x88\x15\xbeU*\xb7\xb3\x09" +
	"Y9\xb4\xfe\xf0\xad7\xa7~W+\x9c\xb9\xb22\x93" +
	"\x99\xabno\x9d\xbe\xa4TZ\xb4_V\xee\xe5\xf7\xf3" +
	"\xfd\xdf\xbf\xfd\xb3*\xebGzA\x12i\x86\xb2n\xb8" +
	"\xfb\xddo.\xa7\xbf\xfb\x15\xac\xde\xa4!\xcdFe\xc3" +
	"m!Sw\xdf\x17\x9f\xea\xfd\xe5\xe6\x0a\xdd#l\xce" +
	"\x18\x0f\xfbs\xecy4,M\x07h\x9d\xf8e\xd3[" +
	"\xd9;\xe7\x15\xd9[\xb5P\xf6\x98&\xc1f\xf7?y" +
	"\xe0a\xfb\xca\xbcBTh!\xd1\xafYc\xec\xe8\xa1" +
	"\xcc\xdf\xea\xc4\xc65W\x1e\xdd\x15\x1ee\xa5\xa9/_" +
	"\xca\xbf\xb7\x00\xbc7>\xda\xd0\xb6\xc9\xa3U\xe1\x0f\x16" +
	"l\xa7\xca\x9cA\xdb)\x0f\xc8\x9f\xce\xb6\x9d\x8dja" +
	"`\xb7\xf0\x0b%\xd3\xf6\x0b%\xe1eL;\xe5\xda\x93" +
	"\x9e\xc5(\x03`\x08\xc0{\xf2\x00V7E\xab\x97`" +
	"\xb0\xdb\xadM\xe6\xaaE\x01\xb8\x0f5 \xa8\x01&\xc8" +
	"TE\x1e\x17\xbe=\xe0\x94\xab{2y\xd1\xe7\xd5+" +
	"\xfe\x12\xc8!\x00k\x0dEk-\xc1>W8\x95\x06" +
	"v\x03\xc1n\x05L[A\xb3\xec\xddW\x9bt*\xc2" +
	"\x17\xdb%\xe1\x91J\xa5\xf6\xb4(f\x86M[\x12\xfe" +
	"\x17}e\xcf\xac{I\x7f~X\xac\xa0\xa3*,{" +
	"Q'`\x11\x11\x08\xa2B\x8a,W\x08`\"Z\x8c" +
	"j\x00\x89\xbd0\xbe\xad\x9c\xf7\x03\xe1\x9a\x9e\x92c\xc8" +
	"\xa2\x89\xd8\xd1\x122R\x10\xbd\xbe\x15,!8b\xe6" +
	"\x14z\xb130\xf62\xe7\xa3!\xbd\xe7\x9e\x12\xaeW" +
	"\xaeU\xb3h\xadA\xc5\xc9\x00\x8b\xd9\x00\xd0\x19\xf5\xbc" +
	"\xf0\xea\xfa\xb2\xe1\xf6/\xee:U\xb4}\x1b{\x80`" +
	"\xcfj\xbe\x09\x11\x9d\xbaWJ|s\xad/\xef\xf4k" +
	"\xae\x88\x87\xd6\xb1\x0d\xcc\xbe\xa5\xb6Y\xc5\xbc\xed\xeb\x90" +
	"\xb4uuj\xcb|\xe42\xb8\x1e\x9b\xb1e[\x1ch" +
	"o\xe8\xaa\xa0\xa3\x8b\xe3\x8d7\x89\x0c\x08\xb2\xd5l!" +
	"YG\xbe\xed\x0d\x8d\x11G)\x9e\x80v,\x9d\x9d\x00" +
	"\xc2O\xeb\x88I\xdec\x1c\xd5\xfcMY{]G\x92" +
	"\xbc9\x18\xa7'\x7f\xe1<\x10>\xad#MB\x18\xe3" +
	"\xe7\x877\\ |JG\x96\xa4\x1b\xc6\xe9\xce\x85\xbc" +
	"'\xbbt\xd4\x92\x97\x10\xe3\xa0\xe3\xe3{\x81\xf01=" +
	"\x88W\x0d\xd4\x15Y\x0cb\xcf\x01-\x94\xb2r\x9a\xd1" +
	"\x120\xde\xc2p\xb4\x86\xb0\x14\xad\x1d\xfa\xda\xff\xa4\xa4" +
	"\xbbT\x88\x94\x0c\xbe\x8e\xeegd\xb5\xff\xd3\xe4\xcb\xfd" +
	"u\x8dt\xbeZ\x96\xfe\xb7O\xabvjG\xe7?\x01" +
	"\x00\x00\xff\xff\xb3\xd4\x83\x1a"

func init() {
	schemas.Register(schema_9bcb07fb35756ee6,
		0x85647b71cba016e2,
		0x9a90fde15285e327,
		0xa29b8ab519fba593,
		0xaa3182f28c82f848,
		0xb02d2ba0578cc7ff,
		0xb20f728e8e60c3f5,
		0xb74958502f92fefd,
		0xc788029a0ef52479,
		0xceaa2020b2f72696,
		0xdc63044e67499411,
		0xdcee0f1a1e882683,
		0xe1a9fd466eca248c,
		0xe7a1e07d1144113e,
		0xebdd19e3dba3370b,
		0xf5692a07c5cf7872,
		0xf834409e30e8009c,
		0xf8fe6156816b7dc7,
		0xf9248392457904d7,
		0xfbab528dd0716804)
}
