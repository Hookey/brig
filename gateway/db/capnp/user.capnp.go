// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type User struct{ capnp.Struct }

// User_TypeID is the unique identifier for the type User.
const User_TypeID = 0x861de4463c5a4a22

func NewUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return User{st}, err
}

func NewRootUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return User{st}, err
}

func ReadRootUser(msg *capnp.Message) (User, error) {
	root, err := msg.RootPtr()
	return User{root.Struct()}, err
}

func (s User) String() string {
	str, _ := text.Marshal(0x861de4463c5a4a22, s.Struct)
	return str
}

func (s User) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s User) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s User) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s User) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s User) PasswordHash() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s User) HasPasswordHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s User) PasswordHashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s User) SetPasswordHash(v string) error {
	return s.Struct.SetText(1, v)
}

func (s User) Salt() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s User) HasSalt() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s User) SaltBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s User) SetSalt(v string) error {
	return s.Struct.SetText(2, v)
}

func (s User) Folders() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s User) HasFolders() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s User) SetFolders(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewFolders sets the folders field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s User) NewFolders(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s User) Rights() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.TextList{List: p.List()}, err
}

func (s User) HasRights() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s User) SetRights(v capnp.TextList) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewRights sets the rights field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s User) NewRights(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// User_List is a list of User.
type User_List struct{ capnp.List }

// NewUser creates a new list of User.
func NewUser_List(s *capnp.Segment, sz int32) (User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return User_List{l}, err
}

func (s User_List) At(i int) User { return User{s.List.Struct(i)} }

func (s User_List) Set(i int, v User) error { return s.List.SetStruct(i, v.Struct) }

func (s User_List) String() string {
	str, _ := text.MarshalList(0x861de4463c5a4a22, s.List)
	return str
}

// User_Promise is a wrapper for a User promised by a client call.
type User_Promise struct{ *capnp.Pipeline }

func (p User_Promise) Struct() (User, error) {
	s, err := p.Pipeline.Struct()
	return User{s}, err
}

const schema_a0b1c18bd0f965c4 = "x\xda\\\xca1J\x03A\x18\xc5\xf1\xf7ff\x15$" +
	"$\x0e\xac\x9d\"\x0a6\x16\x06\xdb (\x16\"V\xf9" +
	"\x0a\x1b\x1b\x19\xdd11\xc4d\xd9Y\x89\x16\xa2B\x10" +
	"E\x05\x0f`\xa1\xe0\x05\xecl\x05\x0f\xe0!\xbc\x84\xd5" +
	"\xca\x06\xd2\xd8\xfd\xdf\x8f7\xdd\xd9P6\xda\x07\xc4D" +
	"\x13\xc5\xe2\xce\xde\xda\xd6\xcf\xdc\x0d\xec,\x8b/\xff\xfb" +
	"}\xff\xf9\xfe\x82(\x9a\x04Vg\xa6h\x97\xcaX\x98" +
	"'X\xb4\\\xee\x07\xee\xbc\xae\x93\x83\xfa\xa1K{i" +
	"\xfd4\xf8le\x94\x8d\xdd\xe03\xa0IJ\xac\x0d`" +
	"\x08\xd8\x8be@\xce4e\xa8h\xc9\x98%^w\x00" +
	"\xb9\xd2\x94\x07E\xabTL\x05\xd8\xbb\xf29\xd4\x94'" +
	"E\xabuL\x0d\xd8\xc7M@n5\xe5M\xd1\x1a\x13" +
	"\xd3\x00\xf6\xb5\x01\xc8\xb3\xa6|(\xd6z\xee\xc4\xb3\x02" +
	"\xc5\x0aX\xa4.\x84A?KP\xdbv\xa1=\xe6Z" +
	"p\xdd|<.\x8f\xfa\xdd\xc4g\x81U\xb0\xa99\xe2" +
	"*\xb8\x9e\x1d\xb7\xda\xf9\x7f\xfd\x0b\x00\x00\xff\xff\x84\x94" +
	":\x18"

func init() {
	schemas.Register(schema_a0b1c18bd0f965c4,
		0x861de4463c5a4a22)
}
